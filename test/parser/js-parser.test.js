// Generated by CoffeeScript 1.10.0
(function() {
  var parser, should;

  should = require('should');

  parser = require('../../src/parser/js-parser');

  describe('js-parser >', function() {
    describe('comma >', function() {
      it('check first comma #1', function() {
        var convention;
        convention = parser.comma(',fs = require(\'fs\')', {});
        return convention.comma.first.should.equal(1);
      });
      it('check first comma #2', function() {
        var convention;
        convention = parser.comma('  ,fs = require(\'fs\')', {});
        return convention.comma.first.should.equal(1);
      });
      it('check first comma #3', function() {
        var convention;
        convention = parser.comma('  fs = , require(\'fs\'),', {});
        return convention.comma.first.should.equal(0);
      });
      it('check first comma #4', function() {
        var convention;
        convention = parser.comma('  , fs = require(\'fs\')', {});
        return convention.comma.first.should.equal(1);
      });
      it('check last comma #1', function() {
        var convention;
        convention = parser.comma('fs = require(\'fs\'),', {});
        return convention.comma.last.should.equal(1);
      });
      it('check last comma #2', function() {
        var convention;
        convention = parser.comma('  fs = require(\'fs\'),', {});
        return convention.comma.last.should.equal(1);
      });
      it('check last comma #3', function() {
        var convention;
        convention = parser.comma('  fs = require(\'fs\'),  ', {});
        return convention.comma.last.should.equal(1);
      });
      return it('check last comma #4', function() {
        var convention;
        convention = parser.comma(' ,fs = ,require(\'fs\'),', {});
        return convention.comma.last.should.equal(1);
      });
    });
    describe('indent >', function() {
      it('check space indent #1', function() {
        var convention;
        convention = parser.indent('var a = 1;', {});
        return convention.indent.space.should.equal(0);
      });
      it('check space indent #2', function() {
        var convention;
        convention = parser.indent('  var a = 1;', {});
        return convention.indent.space.should.equal(1);
      });
      it('check space indent #3', function() {
        var convention;
        convention = parser.indent(' var a = 1;', {});
        return convention.indent.space.should.equal(1);
      });
      it('check space indent #4', function() {
        var convention;
        convention = parser.indent('   var a = 1;', {});
        return convention.indent.space.should.equal(1);
      });
      it('check tab indent #1', function() {
        var convention;
        convention = parser.indent('\tvar a = 1;', {});
        return convention.indent.tab.should.equal(1);
      });
      it('check tab indent #2', function() {
        var convention;
        convention = parser.indent('\t\tvar a = 1;', {});
        return convention.indent.tab.should.equal(1);
      });
      it('check tab indent #3', function() {
        var convention;
        convention = parser.indent('\t\t  var a = 1;  ', {});
        return convention.indent.tab.should.equal(1);
      });
      it('check tab indent #4', function() {
        var convention;
        convention = parser.indent('  \tvar a = 1;', {});
        return convention.indent.tab.should.equal(0);
      });
      return it('check tab indent #5', function() {
        var convention;
        convention = parser.indent('var a = 1;', {});
        return convention.indent.tab.should.equal(0);
      });
    });
    describe('functiondef >', function() {
      it('check function definition followed by no space #1', function() {
        var convention;
        convention = parser.functiondef('var a = function() {', {});
        return convention.functiondef.nospace.should.equal(1);
      });
      it('check function definition followed by no space #2', function() {
        var convention;
        convention = parser.functiondef('var a = function() { return 1; };', {});
        return convention.functiondef.nospace.should.equal(1);
      });
      it('check function definition followed by no space #3', function() {
        var convention;
        convention = parser.functiondef('function a() {}', {});
        return convention.functiondef.nospace.should.equal(1);
      });
      it('check function definition followed by no space #4', function() {
        var convention;
        convention = parser.functiondef('a.fn(function() {})', {});
        return convention.functiondef.nospace.should.equal(1);
      });
      it('check function definition followed by no space #5', function() {
        var convention;
        convention = parser.functiondef('a.fn(function () {})', {});
        return convention.functiondef.nospace.should.equal(0);
      });
      it('check function definition followed by one space #1', function() {
        var convention;
        convention = parser.functiondef('var a = function () { return 1; };', {});
        return convention.functiondef.onespace.should.equal(1);
      });
      it('check function definition followed by one space #2', function() {
        var convention;
        convention = parser.functiondef('function a () {}', {});
        return convention.functiondef.onespace.should.equal(1);
      });
      it('check function definition followed by one space #3', function() {
        var convention;
        convention = parser.functiondef('a.fn(function () {})', {});
        return convention.functiondef.onespace.should.equal(1);
      });
      return it('check function definition followed by one space #4', function() {
        var convention;
        convention = parser.functiondef('a.fn(function() {})', {});
        return convention.functiondef.onespace.should.equal(0);
      });
    });
    describe('argumentdef >', function() {
      it('check argument definition with one space #1', function() {
        var convention;
        convention = parser.argumentdef('function a( arg1, arg2 ) {}', {});
        return convention.argumentdef.onespace.should.equal(1);
      });
      it('check argument definition with one space #2', function() {
        var convention;
        convention = parser.argumentdef('function a ( arg1, arg2 ) {}', {});
        return convention.argumentdef.onespace.should.equal(1);
      });
      it('check argument definition with one space #3', function() {
        var convention;
        convention = parser.argumentdef('a.fn(function( arg1, arg2 ) {})', {});
        return convention.argumentdef.onespace.should.equal(1);
      });
      it('check argument definition with one space #4', function() {
        var convention;
        convention = parser.argumentdef('a.fn(function (arg1, arg2) {})', {});
        return convention.argumentdef.onespace.should.equal(0);
      });
      it('check argument definition with no space #1', function() {
        var convention;
        convention = parser.argumentdef('var a = function(arg1, arg2) {', {});
        return convention.argumentdef.nospace.should.equal(1);
      });
      it('check argument definition with no space #2', function() {
        var convention;
        convention = parser.argumentdef('var a = function (arg1, arg2) { return 1; };', {});
        return convention.argumentdef.nospace.should.equal(1);
      });
      it('check argument definition with no space #3', function() {
        var convention;
        convention = parser.argumentdef('function a(arg1, arg2 ) {}', {});
        return convention.argumentdef.nospace.should.equal(1);
      });
      it('check argument definition with no space #4', function() {
        var convention;
        convention = parser.argumentdef('a.fn(function (arg1, arg2) {})', {});
        return convention.argumentdef.nospace.should.equal(1);
      });
      it('check argument definition with no space #5', function() {
        var convention;
        convention = parser.argumentdef('function a ( arg1, arg2 ) {}', {});
        return convention.argumentdef.nospace.should.equal(0);
      });
      return it('check argument definition with no space #6', function() {
        var convention;
        convention = parser.argumentdef('       }//if                                               -', {});
        convention.argumentdef.nospace.should.equal(0);
        return convention.argumentdef.onespace.should.equal(0);
      });
    });
    describe('literaldef >', function() {
      it('check object literal definition with trace space #1', function() {
        var convention;
        convention = parser.literaldef('  init: "value",', {});
        return convention.literaldef.tracespace.should.equal(1);
      });
      it('check object literal definition with trace space #2', function() {
        var convention;
        convention = parser.literaldef(' init: function() { ', {});
        return convention.literaldef.tracespace.should.equal(1);
      });
      it('check object literal definition with trace space #3', function() {
        var convention;
        convention = parser.literaldef('{ key: value, key: value }', {});
        return convention.literaldef.tracespace.should.equal(1);
      });
      it('check object literal definition with trace space #4', function() {
        var convention;
        convention = parser.literaldef(' init : function() { ', {});
        return convention.literaldef.tracespace.should.equal(0);
      });
      it('check object literal definition with both space #1', function() {
        var convention;
        convention = parser.literaldef('  init : "value",', {});
        return convention.literaldef.bothspace.should.equal(1);
      });
      it('check object literal definition with both space #2', function() {
        var convention;
        convention = parser.literaldef(' init : function() { ', {});
        return convention.literaldef.bothspace.should.equal(1);
      });
      it('check object literal definition with both space #3', function() {
        var convention;
        convention = parser.literaldef('{ key : value, key: value }', {});
        return convention.literaldef.bothspace.should.equal(1);
      });
      it('check object literal definition with both space #4', function() {
        var convention;
        convention = parser.literaldef(' init: function() { ', {});
        return convention.literaldef.bothspace.should.equal(0);
      });
      it('check object literal definition with no space #1', function() {
        var convention;
        convention = parser.literaldef('  init:"value",', {});
        return convention.literaldef.nospace.should.equal(1);
      });
      it('check object literal definition with no space #2', function() {
        var convention;
        convention = parser.literaldef(' init:function() { ', {});
        return convention.literaldef.nospace.should.equal(1);
      });
      it('check object literal definition with no space #3', function() {
        var convention;
        convention = parser.literaldef('{ key:value, key: value }', {});
        return convention.literaldef.nospace.should.equal(1);
      });
      return it('check object literal definition with no space #4', function() {
        var convention;
        convention = parser.literaldef(' init :function() { ', {});
        return convention.literaldef.nospace.should.equal(0);
      });
    });
    describe('conditionstatement >', function() {
      it('check condition statement with one space #1', function() {
        var convention;
        convention = parser.conditionstatement('if ( a = 1) {', {});
        return convention.conditionstatement.onespace.should.equal(1);
      });
      it('check condition statement with one space #2', function() {
        var convention;
        convention = parser.conditionstatement('while ( ture ) {', {});
        return convention.conditionstatement.onespace.should.equal(1);
      });
      it('check condition statement with one space #3', function() {
        var convention;
        convention = parser.conditionstatement('switch ( a ) {', {});
        return convention.conditionstatement.onespace.should.equal(1);
      });
      it('check condition statement with one space #4', function() {
        var convention;
        convention = parser.conditionstatement('if( a = 1) {', {});
        return convention.conditionstatement.onespace.should.equal(0);
      });
      it('check condition statement with no space #1', function() {
        var convention;
        convention = parser.conditionstatement('if( a = 1) {', {});
        return convention.conditionstatement.nospace.should.equal(1);
      });
      it('check condition statement with no space #2', function() {
        var convention;
        convention = parser.conditionstatement('while( ture ) {', {});
        return convention.conditionstatement.nospace.should.equal(1);
      });
      it('check condition statement with no space #3', function() {
        var convention;
        convention = parser.conditionstatement('switch( a ) {', {});
        return convention.conditionstatement.nospace.should.equal(1);
      });
      return it('check condition statement with no space #4', function() {
        var convention;
        convention = parser.conditionstatement('if ( a = 1) {', {});
        return convention.conditionstatement.nospace.should.equal(0);
      });
    });
    describe('blockstatement >', function() {
      it('check block statement with one space #1', function() {
        var convention;
        convention = parser.blockstatement('if (true) { return; }', {});
        return convention.blockstatement.onespace.should.equal(1);
      });
      it('check block statement with one space #2', function() {
        var convention;
        convention = parser.blockstatement('} else if ( true ) {', {});
        return convention.blockstatement.onespace.should.equal(1);
      });
      it('check block statement with one space #3', function() {
        var convention;
        convention = parser.blockstatement('} else if ( true ) {', {});
        return convention.blockstatement.onespace.should.equal(1);
      });
      it('check block statement with one space #4', function() {
        var convention;
        convention = parser.blockstatement('else if (true) {', {});
        return convention.blockstatement.onespace.should.equal(1);
      });
      it('check block statement with one space #5', function() {
        var convention;
        convention = parser.blockstatement('if (true){ return; }', {});
        return convention.blockstatement.onespace.should.equal(0);
      });
      it('check block statement with no space #1', function() {
        var convention;
        convention = parser.blockstatement('if (true){ return (); }', {});
        return convention.blockstatement.nospace.should.equal(1);
      });
      it('check block statement with no space #2', function() {
        var convention;
        convention = parser.blockstatement('}else if (true){', {});
        return convention.blockstatement.nospace.should.equal(1);
      });
      it('check block statement with no space #3', function() {
        var convention;
        convention = parser.blockstatement('if (true)', {});
        return convention.blockstatement.nospace.should.equal(0);
      });
      it('check block statement with no space #4', function() {
        var convention;
        convention = parser.blockstatement('} else if(true) {', {});
        return convention.blockstatement.nospace.should.equal(0);
      });
      it('check block statement at new line #1', function() {
        var convention;
        convention = parser.blockstatement('if (true)', {});
        return convention.blockstatement.newline.should.equal(1);
      });
      it('check block statement at new line #2', function() {
        var convention;
        convention = parser.blockstatement('if (true) // comment', {});
        return convention.blockstatement.newline.should.equal(1);
      });
      it('check block statement at new line #3', function() {
        var convention;
        convention = parser.blockstatement('if (true)/* */', {});
        return convention.blockstatement.newline.should.equal(1);
      });
      it('check block statement at new line #4', function() {
        var convention;
        convention = parser.blockstatement('else if (true)', {});
        return convention.blockstatement.newline.should.equal(1);
      });
      it('check block statement at new line #5', function() {
        var convention;
        convention = parser.blockstatement('else if (true) {', {});
        return convention.blockstatement.newline.should.equal(1);
      });
      return it('check block statement at new line #6', function() {
        var convention;
        convention = parser.blockstatement('}  else if ( true ) {', {});
        return convention.blockstatement.newline.should.equal(0);
      });
    });
    describe('linelength >', function() {
      it('line length is 80 characters #1', function() {
        var convention;
        convention = parser.linelength('    public String findFirstName( String name, String age) { return \"a\"; }', {});
        return convention.linelength.char80.should.equal(1);
      });
      it('line length is 80 characters #2', function() {
        var convention;
        convention = parser.linelength('\t\tpublic String findFirstName( String name, String age) { return \"a\"; }', {});
        return convention.linelength.char80.should.equal(1);
      });
      it('line length is 80 characters #3', function() {
        var convention;
        convention = parser.linelength('\t\t\tpublic String findFirstName( String name, String age) { return \"a\"; }', {});
        return convention.linelength.char80.should.equal(0);
      });
      it('line length is 120 characters #1', function() {
        var convention;
        convention = parser.linelength('    public String findFirstName( String name, String age, String job) { return \"a\"; }', {});
        return convention.linelength.char120.should.equal(1);
      });
      it('line length is 120 characters #2', function() {
        var convention;
        convention = parser.linelength('\t\tpublic String findFirstName( String name, String age, String job) { return \"a\"; }', {});
        return convention.linelength.char120.should.equal(1);
      });
      it('line length is 120 characters #3', function() {
        var convention;
        convention = parser.linelength('\t\tpublic String findFirstName( String name, String age) { return \"a\"; }', {});
        return convention.linelength.char120.should.equal(0);
      });
      return it('line length is 150 characters #1', function() {
        var convention;
        convention = parser.linelength('    public String findFirstName( String name, String age, String job) { return \"a\"; } //afijfjeovjfiejffjeifjidjvosjfiejfioejovfjeifjiejfosjfioejfoiejfoi', {});
        return convention.linelength.char150.should.equal(1);
      });
    });
    return describe('quotes >', function() {
      it('single quote #1', function() {
        var convention;
        convention = parser.quotes("  var foo = 'bar';");
        return convention.quotes.single.should.equal(1);
      });
      it('single quote #2', function() {
        var convention;
        convention = parser.quotes("  var foo = '<div id=\"bar\">baz</div>';");
        return convention.quotes.single.should.equal(1);
      });
      it('single quote #3', function() {
        var convention;
        convention = parser.quotes("  var foo = '<div id=\'bar\'>baz</div>';");
        return convention.quotes.single.should.equal(1);
      });
      it('single quote #4', function() {
        var convention;
        convention = parser.quotes(" 'key': 'value' ");
        return convention.quotes.single.should.equal(1);
      });
      it('single quote #5', function() {
        var convention;
        convention = parser.quotes(" 'key': true ");
        return convention.quotes.single.should.equal(1);
      });
      it('single quote #6', function() {
        var convention;
        convention = parser.quotes("  var foo = \"bar\";");
        return convention.quotes.single.should.equal(0);
      });
      it('single quote #7', function() {
        var convention;
        convention = parser.quotes("  var foo = \"<div id='bar'>baz</div>\";");
        return convention.quotes.single.should.equal(0);
      });
      it('single quote #8', function() {
        var convention;
        convention = parser.quotes(" 'key': \"value\" ");
        return convention.quotes.single.should.equal(0);
      });
      it('double quotes #1', function() {
        var convention;
        convention = parser.quotes("  var foo = \"bar\";");
        return convention.quotes.double.should.equal(1);
      });
      it('double quotes #2', function() {
        var convention;
        convention = parser.quotes("  var foo = \"<div id='bar'>baz</div>\";");
        return convention.quotes.double.should.equal(1);
      });
      it('double quotes #3', function() {
        var convention;
        convention = parser.quotes("  var foo = \"<div id=\"bar\">baz</div>\";");
        return convention.quotes.double.should.equal(1);
      });
      it('double quotes #4', function() {
        var convention;
        convention = parser.quotes(" \"key\": \"value\" ");
        return convention.quotes.double.should.equal(1);
      });
      it('double quotes #5', function() {
        var convention;
        convention = parser.quotes(" \"key\": true ");
        return convention.quotes.double.should.equal(1);
      });
      it('double quotes #6', function() {
        var convention;
        convention = parser.quotes("  var foo = 'bar';");
        return convention.quotes.double.should.equal(0);
      });
      it('double quotes #7', function() {
        var convention;
        convention = parser.quotes("  var foo = '<div id=\"bar\">baz</div>';");
        return convention.quotes.double.should.equal(0);
      });
      return it('double quotes #8', function() {
        var convention;
        convention = parser.quotes(" 'key': \"value\" ");
        return convention.quotes.double.should.equal(0);
      });
    });
  });

}).call(this);
