// Generated by CoffeeScript 1.10.0
(function() {
  var parser, should;

  should = require('should');

  parser = require('../../src/parser/scala-parser');

  describe('scala-parser >', function() {
    describe('indent >', function() {
      it('check space indent #1', function() {
        var convention;
        convention = parser.indent('a = 1;', {});
        return convention.indent.space.should.equal(0);
      });
      it('check space indent #2', function() {
        var convention;
        convention = parser.indent('  a = 1;', {});
        return convention.indent.space.should.equal(1);
      });
      it('check space indent #3', function() {
        var convention;
        convention = parser.indent('  a = 1;', {});
        return convention.indent.space.should.equal(1);
      });
      it('check space indent #4', function() {
        var convention;
        convention = parser.indent('   a = 1;', {});
        return convention.indent.space.should.equal(1);
      });
      it('check tab indent #1', function() {
        var convention;
        convention = parser.indent('\ta = 1;', {});
        return convention.indent.tab.should.equal(1);
      });
      it('check tab indent #2', function() {
        var convention;
        convention = parser.indent('\t\ta = 1;', {});
        return convention.indent.tab.should.equal(1);
      });
      it('check tab indent #3', function() {
        var convention;
        convention = parser.indent('\t\t  a = 1;  ', {});
        return convention.indent.tab.should.equal(1);
      });
      it('check tab indent #4', function() {
        var convention;
        convention = parser.indent('  \ta = 1;', {});
        return convention.indent.tab.should.equal(0);
      });
      return it('check tab indent #5', function() {
        var convention;
        convention = parser.indent('a = 1;', {});
        return convention.indent.tab.should.equal(0);
      });
    });
    describe('linelength >', function() {
      it('line length is 80 characters #1', function() {
        var convention;
        convention = parser.linelength('    public String findFirstName( String name, String age) { return \"a\"; }', {});
        return convention.linelength.char80.should.equal(1);
      });
      it('line length is 80 characters #2', function() {
        var convention;
        convention = parser.linelength('\t\tpublic String findFirstName( String name, String age) { return \"a\"; }', {});
        return convention.linelength.char80.should.equal(1);
      });
      it('line length is 80 characters #3', function() {
        var convention;
        convention = parser.linelength('\t\t\tpublic String findFirstName( String name, String age) { return \"a\"; }', {});
        return convention.linelength.char80.should.equal(0);
      });
      it('line length is 120 characters #1', function() {
        var convention;
        convention = parser.linelength('    public String findFirstName( String name, String age, String job) { return \"a\"; }', {});
        return convention.linelength.char120.should.equal(1);
      });
      it('line length is 120 characters #2', function() {
        var convention;
        convention = parser.linelength('\t\tpublic String findFirstName( String name, String age, String job) { return \"a\"; }', {});
        return convention.linelength.char120.should.equal(1);
      });
      it('line length is 120 characters #3', function() {
        var convention;
        convention = parser.linelength('\t\tpublic String findFirstName( String name, String age) { return \"a\"; }', {});
        return convention.linelength.char120.should.equal(0);
      });
      return it('line length is 150 characters #1', function() {
        var convention;
        convention = parser.linelength('    public String findFirstName( String name, String age, String job) { return \"a\"; } //afijfjeovjfiejffjeifjidjvosjfiejfioejovfjeifjiejfosjfioejfoiejfoi', {});
        return convention.linelength.char150.should.equal(1);
      });
    });
    describe('classname >', function() {
      it('camelcases with capitalzied #1', function() {
        var convention;
        convention = parser.classname('class MyFairLady', {});
        return convention.classname.capital.should.equal(1);
      });
      it('camelcases with capitalzied #2', function() {
        var convention;
        convention = parser.classname('class My1stFairLady', {});
        return convention.classname.capital.should.equal(1);
      });
      it('camelcases with capitalzied #3', function() {
        var convention;
        convention = parser.classname('trait MyFairLady', {});
        return convention.classname.capital.should.equal(1);
      });
      it('camelcases with capitalzied #4', function() {
        var convention;
        convention = parser.classname('class myFairLady', {});
        return convention.classname.capital.should.equal(0);
      });
      it('camelcases with non-capitalzied #1', function() {
        var convention;
        convention = parser.classname('class myFairLady', {});
        return convention.classname.nocapital.should.equal(1);
      });
      it('camelcases with non-capitalzied #2', function() {
        var convention;
        convention = parser.classname('class my1stFairLady', {});
        return convention.classname.nocapital.should.equal(1);
      });
      it('camelcases with non-capitalzied #3', function() {
        var convention;
        convention = parser.classname('trait myFairLady', {});
        return convention.classname.nocapital.should.equal(1);
      });
      return it('camelcases with non-capitalzied #4', function() {
        var convention;
        convention = parser.classname('trait MyFairLady', {});
        return convention.classname.nocapital.should.equal(0);
      });
    });
    describe('variablename >', function() {
      it('camelcases with capitalzied #1', function() {
        var convention;
        convention = parser.variablename('val myValue = ...', {});
        return convention.variablename.camelcase.should.equal(1);
      });
      it('camelcases with capitalzied #2', function() {
        var convention;
        convention = parser.variablename('def myMethod = ...', {});
        return convention.variablename.camelcase.should.equal(1);
      });
      it('camelcases with capitalzied #3', function() {
        var convention;
        convention = parser.variablename('var myVariable', {});
        return convention.variablename.camelcase.should.equal(1);
      });
      it('camelcases with capitalzied #4', function() {
        var convention;
        convention = parser.variablename('val MY_VALUE = ...', {});
        return convention.variablename.camelcase.should.equal(0);
      });
      it('camelcases with non-capitalzied #1', function() {
        var convention;
        convention = parser.variablename('val MyValue = ...', {});
        return convention.variablename.noncamelcase.should.equal(1);
      });
      it('camelcases with non-capitalzied #2', function() {
        var convention;
        convention = parser.variablename('def MyMethod = ...', {});
        return convention.variablename.noncamelcase.should.equal(1);
      });
      it('camelcases with non-capitalzied #3', function() {
        var convention;
        convention = parser.variablename('var MyVariable', {});
        return convention.variablename.noncamelcase.should.equal(1);
      });
      return it('camelcases with non-capitalzied #4', function() {
        var convention;
        convention = parser.variablename('val MY_VALUE = ...', {});
        return convention.variablename.noncamelcase.should.equal(0);
      });
    });
    return describe('parametertype >', function() {
      it('parameter type with one space #1', function() {
        var convention;
        convention = parser.parametertype('def add(a: Int, b: Int) = a + b', {});
        return convention.parametertype.tracespace.should.equal(1);
      });
      it('parameter type with one space #2', function() {
        var convention;
        convention = parser.parametertype('def add(a:Int, b: Int) = a + b', {});
        return convention.parametertype.tracespace.should.equal(1);
      });
      it('parameter type with one space #3', function() {
        var convention;
        convention = parser.parametertype('def add(a:Int, b:Int): Unit = a + b', {});
        return convention.parametertype.tracespace.should.equal(0);
      });
      it('parameter type with both space #1', function() {
        var convention;
        convention = parser.parametertype('def add(a : Int, b : Int) = a + b', {});
        return convention.parametertype.bothspace.should.equal(1);
      });
      it('parameter type with both space #2', function() {
        var convention;
        convention = parser.parametertype('def add(a:Int, b : Int) = a + b', {});
        return convention.parametertype.bothspace.should.equal(1);
      });
      it('parameter type with both space #3', function() {
        var convention;
        convention = parser.parametertype('def add(a:Int, b: Int) : Unit = a + b', {});
        return convention.parametertype.bothspace.should.equal(0);
      });
      it('parameter type with no space #1', function() {
        var convention;
        convention = parser.parametertype('def add(a:Int, b:Int) = a + b', {});
        return convention.parametertype.nospace.should.equal(1);
      });
      it('parameter type with no space #2', function() {
        var convention;
        convention = parser.parametertype('def add(a: Int, b:Int) = a + b', {});
        return convention.parametertype.nospace.should.equal(1);
      });
      return it('parameter type with no space #2', function() {
        var convention;
        convention = parser.parametertype('def add(a: Int, b: Int):Unit = a + b', {});
        return convention.parametertype.nospace.should.equal(0);
      });
    });
  });

}).call(this);
