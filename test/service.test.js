// Generated by CoffeeScript 1.10.0
(function() {
  var parser, service, should, timeline;

  should = require('should');

  service = require('../src/service');

  timeline = require('../src/timeline');

  parser = require('../src/parser/parser');

  describe('service >', function() {
    before(function(done) {
      return setTimeout((function() {
        return done();
      }), 1000);
    });
    it.skip('fetch githubarchive', function(done) {
      return service.fetchGithubArchive("2013-04-01-15", function(err) {
        return done();
      });
    });
    it('progress timeline', function(done) {
      return service.progressTimeline(function(err) {
        return setTimeout((function() {
          return done();
        }), 200000);
      });
    });
    it('summarize score', function(done) {
      return service.summarizeScore(function(err) {
        return setTimeout((function() {
          return done();
        }), 10000);
      });
    });
    it('find score', function(done) {
      return service.findScore('js', function(err, scores) {
        return done();
      });
    });
    it('parsing commit test', function(done) {
      var item, urls;
      process.on('uncaughtException', function(err) {
        return console.log('Caught exception: ' + err);
      });
      item = {
        repository: {
          owner: 'realodix',
          name: 'WBPL-MusicLight'
        },
        payload: {
          shas: [["36833e34d63b4b93ac512e041b201bdf4c126f08"]]
        }
      };
      urls = timeline.getCommitUrls(item);
      return timeline.getCommitInfo(urls[0], function(err, commit) {
        var conventions;
        conventions = parser.parse(commit);
        console.log(conventions);
        return done();
      });
    });
    return it('find desc', function(done) {
      return service.findDescription(function(err, desc) {
        console.log(desc);
        return done();
      });
    });
  });

}).call(this);
