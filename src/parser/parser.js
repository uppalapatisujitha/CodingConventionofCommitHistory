// Generated by CoffeeScript 1.10.0
(function() {
  var csharpParser, helpers, isSupportExt, javaParser, jsParser, logger, parser, path, phpParser, pythonParser, rubyParser, scalaParser, supportExts;

  helpers = require('../helpers');

  path = require('path');

  logger = (require('../helpers')).logger;

  jsParser = require('./js-parser');

  javaParser = require('./java-parser');

  pythonParser = require('./python-parser');

  scalaParser = require('./scala-parser');

  rubyParser = require('./ruby-parser');

  csharpParser = require('./csharp-parser');

  phpParser = require('./php-parser');

  parser = module.exports = {
    parsePatch: function(commit) {
      if ('string' === helpers.extractType(commit)) {
        commit = JSON.parse(commit);
      }
      return commit.files;
    },
    parseAdditionTokens: function(patch) {
      var i, len, line, results;
      patch = patch.split('\n');
      results = [];
      for (i = 0, len = patch.length; i < len; i++) {
        line = patch[i];
        if (line.charAt(0) === '+') {
          results.push(line.substr(1));
        }
      }
      return results;
    },
    parse: function(commit) {
      var conventions, err, error;
      conventions = [];
      try {
        if ('string' === helpers.extractType(commit)) {
          commit = JSON.parse(commit);
        }
        commit.files.forEach(function(file) {
          var convention, ext, key, lines, psr;
          ext = path.extname(file.filename);
          if (isSupportExt(ext) && (file.patch != null)) {
            convention = {
              lang: ext.substr(1)
            };
            psr = parser.getParser(ext);
            lines = parser.parseAdditionTokens(file.patch);
            lines.forEach(function(line) {
              return convention = psr.parse(line, convention, commit.html_url);
            });
            for (key in convention) {
              delete convention[key].title;
              delete convention[key].column;
            }
            if (Object.keys(convention).length > 1) {
              return conventions.push(convention);
            }
          }
        });
        return conventions;
      } catch (error) {
        err = error;
        logger.error('parsing', {
          err: err
        });
        return [];
      }
    },
    getParser: function(ext) {
      switch (ext) {
        case '.js':
          return jsParser;
        case '.java':
          return javaParser;
        case '.py':
          return pythonParser;
        case '.scala':
          return scalaParser;
        case '.rb':
          return rubyParser;
        case '.cs':
          return csharpParser;
        case '.php':
          return phpParser;
      }
    }
  };

  supportExts = ['.js', '.java', '.py', '.scala', '.rb', '.cs', '.php'];

  isSupportExt = function(ext) {
    return supportExts.some(function(elem) {
      return elem === ext;
    });
  };

}).call(this);
