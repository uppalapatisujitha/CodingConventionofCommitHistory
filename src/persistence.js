// Generated by CoffeeScript 1.10.0
(function() {
  var MongoClient, conventions, dbserver, logger, score, worklogs;

  MongoClient = (require('mongodb')).MongoClient;

  logger = (require('./helpers')).logger;

  worklogs = null;

  conventions = null;

  score = null;

  dbserver = null;

  module.exports = {
    open: function(callback) {
      return MongoClient.connect("mongodb://" + process.env['MONGODB_HOST'] + ":" + process.env['MONGODB_PORT'] + "/popular_convention2", function(err, db) {
        if (err != null) {
          return callback(err);
        }
        dbserver = db;
        worklogs = dbserver.collection('worklogs');
        conventions = dbserver.collection('conventions');
        score = dbserver.collection('score');
        if (process.env['NODE_ENV'] === 'production') {
          return db.authenticate(process.env["MONGODB_USER"], process.env["MONGODB_PASS"], function(err, result) {
            if ((err != null) || result !== true) {
              return callback(err);
            }
            return dbserver.ensureIndex('conventions', {
              timestamp: 1
            }, function(err) {
              if (err != null) {
                return callback(err);
              }
              return dbserver.ensureIndex('score', {
                shortfile: 1,
                lang: 1,
                file: 1
              }, function(err) {
                if (err != null) {
                  return callback(err);
                }
                return callback();
              });
            });
          });
        } else {
          return dbserver.ensureIndex('conventions', {
            timestamp: 1
          }, function(err) {
            if (err != null) {
              return callback(err);
            }
            return dbserver.ensureIndex('score', {
              shortfile: 1,
              lang: 1,
              file: 1
            }, function(err) {
              if (err != null) {
                return callback(err);
              }
              return callback();
            });
          });
        }
      });
    },
    insertWorklogs: function(doc, callback) {
      return worklogs.insert(doc, callback);
    },
    processWorklog: function(id, callback) {
      return worklogs.update({
        _id: id
      }, {
        $set: {
          inProcess: true
        }
      }, callback);
    },
    completeWorklog: function(id, callback) {
      return worklogs.update({
        _id: id
      }, {
        $set: {
          completed: true,
          completeDate: new Date
        }
      }, callback);
    },
    summarizeWorklog: function(id, callback) {
      return worklogs.update({
        _id: id
      }, {
        $set: {
          summarize: true
        }
      }, callback);
    },
    findOneWorklogToProcess: function(callback) {
      return worklogs.findOne({
        "inProcess": false,
        "completed": false
      }, callback);
    },
    findOneWorklogToSummarize: function(callback) {
      return worklogs.findOne({
        "completed": true,
        "summarize": false
      }, callback);
    },
    findTimeline: function(coll, callback) {
      return dbserver.collection(coll).find(callback);
    },
    dropTimeline: function(coll, callback) {
      return dbserver.collection(coll).drop(callback);
    },
    insertConvention: function(conv, callback) {
      return conventions.insert(conv, callback);
    },
    findConvention: function(file, callback) {
      return conventions.find({
        "file": file
      }, callback);
    },
    upsertScore: function(data, callback) {
      return score.update({
        _id: data._id
      }, data, {
        upsert: true
      }, callback);
    },
    findScoreByLang: function(lang, callback) {
      return score.find({
        lang: lang
      }, {
        sort: [['shortfile', -1]]
      }, callback);
    },
    findLastestScore: function(callback) {
      var lastest;
      lastest = null;
      return score.findOne({}, {
        sort: [['file', -1]]
      }, function(err, item) {
        if (err != null) {
          return callback(err);
        } else if (item != null) {
          lastest = item;
          return score.findOne({
            file: new RegExp(lastest.shortfile + '-2[0-3]')
          }, {
            sort: [['file', -1]]
          }, function(err, item) {
            if (err != null) {
              return callback(err);
            } else if (item != null) {
              return callback(null, item);
            } else {
              return score.findOne({
                file: new RegExp(lastest.shortfile + '-1[0-9]')
              }, {
                sort: [['file', -1]]
              }, function(err, item) {
                if (err != null) {
                  return callback(err);
                } else if (item != null) {
                  return callback(null, item);
                } else {
                  return callback(null, lastest);
                }
              });
            }
          });
        } else {
          return callback(null, null);
        }
      });
    },
    findScoreByFileAndLang: function(file, lang, callback) {
      return score.findOne({
        shortfile: file,
        lang: lang
      }, callback);
    },
    findPeriodOfScore: function(callback) {
      return score.group(['shortfile'], {}, {}, "function() {}", callback);
    },
    getTimeline: function(callback) {
      return conventions.find().limit(10, callback);
    }
  };

}).call(this);
